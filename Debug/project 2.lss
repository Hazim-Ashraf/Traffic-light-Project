
project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013b0  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ae  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000832  00000000  00000000  00002112  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  00002944  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000476  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bf7  00000000  00000000  00002f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003b85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED_ON>:
{
	DIO_write(pinNumber, PortNumber,LOW);
}
void LED_TOGGLE(uint8_t pinNumber,uint8_t PortNumber)
{
	DIO_toggle(pinNumber,PortNumber);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_write>
  72:	08 95       	ret

00000074 <LED_OFF>:
  74:	40 e0       	ldi	r20, 0x00	; 0
  76:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_write>
  7a:	08 95       	ret

0000007c <LED_INIT>:
}
void LED_INIT(uint8_t pinNumber,uint8_t PortNumber)
{
	DIO_init( pinNumber, PortNumber,OUTPUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	0e 94 65 00 	call	0xca	; 0xca <DIO_init>
  82:	08 95       	ret

00000084 <main>:
//#include <avr/interrupt.h>

int main(void)
{
	
	LED_INIT(2,'A');
  84:	61 e4       	ldi	r22, 0x41	; 65
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_INIT>
	ENABLE_INTR(7);
  90:	87 e0       	ldi	r24, 0x07	; 7
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <ENABLE_INTR>

	while(1)
	{
		
		
		LED_ON(2,'A');
  98:	61 e4       	ldi	r22, 0x41	; 65
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 36 00 	call	0x6c	; 0x6c <LED_ON>
		DELAY(0.5);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	9f e3       	ldi	r25, 0x3F	; 63
  ac:	0e 94 30 01 	call	0x260	; 0x260 <DELAY>
		LED_OFF(2,'A');
  b0:	61 e4       	ldi	r22, 0x41	; 65
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 3a 00 	call	0x74	; 0x74 <LED_OFF>
		DELAY(0.5);
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	9f e3       	ldi	r25, 0x3F	; 63
  c4:	0e 94 30 01 	call	0x260	; 0x260 <DELAY>
  c8:	e7 cf       	rjmp	.-50     	; 0x98 <main+0x14>

000000ca <DIO_init>:
		READ_PIN(pinNumber,PINC,value);
		break;
	}
	case 'D':
	{
		READ_PIN(pinNumber,PIND,value);
  ca:	63 34       	cpi	r22, 0x43	; 67
  cc:	29 f1       	breq	.+74     	; 0x118 <DIO_init+0x4e>
  ce:	18 f4       	brcc	.+6      	; 0xd6 <DIO_init+0xc>
  d0:	61 34       	cpi	r22, 0x41	; 65
  d2:	31 f0       	breq	.+12     	; 0xe0 <DIO_init+0x16>
  d4:	08 95       	ret
  d6:	64 34       	cpi	r22, 0x44	; 68
  d8:	69 f1       	breq	.+90     	; 0x134 <DIO_init+0x6a>
  da:	62 36       	cpi	r22, 0x62	; 98
  dc:	79 f0       	breq	.+30     	; 0xfc <DIO_init+0x32>
  de:	08 95       	ret
  e0:	41 30       	cpi	r20, 0x01	; 1
  e2:	29 f4       	brne	.+10     	; 0xee <DIO_init+0x24>
  e4:	6a e3       	ldi	r22, 0x3A	; 58
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
  ec:	08 95       	ret
  ee:	41 11       	cpse	r20, r1
  f0:	2e c0       	rjmp	.+92     	; 0x14e <DIO_init+0x84>
  f2:	6a e3       	ldi	r22, 0x3A	; 58
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 56 01 	call	0x2ac	; 0x2ac <CLEAR_PIN>
  fa:	08 95       	ret
  fc:	41 30       	cpi	r20, 0x01	; 1
  fe:	29 f4       	brne	.+10     	; 0x10a <DIO_init+0x40>
 100:	67 e3       	ldi	r22, 0x37	; 55
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 108:	08 95       	ret
 10a:	41 11       	cpse	r20, r1
 10c:	20 c0       	rjmp	.+64     	; 0x14e <DIO_init+0x84>
 10e:	67 e3       	ldi	r22, 0x37	; 55
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 56 01 	call	0x2ac	; 0x2ac <CLEAR_PIN>
 116:	08 95       	ret
 118:	41 30       	cpi	r20, 0x01	; 1
 11a:	29 f4       	brne	.+10     	; 0x126 <DIO_init+0x5c>
 11c:	64 e3       	ldi	r22, 0x34	; 52
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 124:	08 95       	ret
 126:	41 11       	cpse	r20, r1
 128:	12 c0       	rjmp	.+36     	; 0x14e <DIO_init+0x84>
 12a:	64 e3       	ldi	r22, 0x34	; 52
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0e 94 56 01 	call	0x2ac	; 0x2ac <CLEAR_PIN>
 132:	08 95       	ret
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	29 f4       	brne	.+10     	; 0x142 <DIO_init+0x78>
 138:	61 e3       	ldi	r22, 0x31	; 49
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 140:	08 95       	ret
 142:	41 11       	cpse	r20, r1
 144:	04 c0       	rjmp	.+8      	; 0x14e <DIO_init+0x84>
 146:	61 e3       	ldi	r22, 0x31	; 49
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 56 01 	call	0x2ac	; 0x2ac <CLEAR_PIN>
 14e:	08 95       	ret

00000150 <DIO_write>:
	}
}
}
void DIO_write(uint8_t pinNumber,uint8_t PortNumber,uint8_t State) // to 
{
switch(PortNumber)
 150:	62 34       	cpi	r22, 0x42	; 66
 152:	b9 f0       	breq	.+46     	; 0x182 <DIO_write+0x32>
 154:	18 f4       	brcc	.+6      	; 0x15c <DIO_write+0xc>
 156:	61 34       	cpi	r22, 0x41	; 65
 158:	31 f0       	breq	.+12     	; 0x166 <DIO_write+0x16>
 15a:	08 95       	ret
 15c:	63 34       	cpi	r22, 0x43	; 67
 15e:	f9 f0       	breq	.+62     	; 0x19e <DIO_write+0x4e>
 160:	64 34       	cpi	r22, 0x44	; 68
 162:	59 f1       	breq	.+86     	; 0x1ba <DIO_write+0x6a>
 164:	08 95       	ret
	{
	case 'A':
	{
		if(State==HIGH)//if it is set to be output set pin to 1
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	29 f4       	brne	.+10     	; 0x174 <DIO_write+0x24>
		{
			
			SET_PIN(pinNumber,PORTA);
 16a:	6b e3       	ldi	r22, 0x3B	; 59
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 172:	08 95       	ret
		}
		else if(State==LOW)
 174:	41 11       	cpse	r20, r1
 176:	2e c0       	rjmp	.+92     	; 0x1d4 <DIO_write+0x84>
		{
			CLEAR_PIN(pinNumber,PORTA);//if it is set to be output set pin to 0
 178:	6b e3       	ldi	r22, 0x3B	; 59
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	0e 94 56 01 	call	0x2ac	; 0x2ac <CLEAR_PIN>
 180:	08 95       	ret
		}
	break;
	}
	case 'B':
	{
		if(State==HIGH)//if it is set to be output set pin to 1
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	29 f4       	brne	.+10     	; 0x190 <DIO_write+0x40>
		{
			SET_PIN(pinNumber,PORTB);
 186:	68 e3       	ldi	r22, 0x38	; 56
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 18e:	08 95       	ret
		}
		else if(State==LOW)
 190:	41 11       	cpse	r20, r1
 192:	20 c0       	rjmp	.+64     	; 0x1d4 <DIO_write+0x84>
		{
			CLEAR_PIN(pinNumber,PORTB);//if it is set to be output set pin to 0
 194:	68 e3       	ldi	r22, 0x38	; 56
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	0e 94 56 01 	call	0x2ac	; 0x2ac <CLEAR_PIN>
 19c:	08 95       	ret
		}
		break;
	}
	case 'C':
	{
		if(State==HIGH)//if it is set to be output set pin to 1
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	29 f4       	brne	.+10     	; 0x1ac <DIO_write+0x5c>
		{
			SET_PIN(pinNumber,PORTC);
 1a2:	65 e3       	ldi	r22, 0x35	; 53
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 1aa:	08 95       	ret
		}
		else if(State==LOW)
 1ac:	41 11       	cpse	r20, r1
 1ae:	12 c0       	rjmp	.+36     	; 0x1d4 <DIO_write+0x84>
		{
			CLEAR_PIN(pinNumber,PORTC);//if it is set to be output set pin to 0
 1b0:	65 e3       	ldi	r22, 0x35	; 53
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	0e 94 56 01 	call	0x2ac	; 0x2ac <CLEAR_PIN>
 1b8:	08 95       	ret
		}
		break;
	}
	case 'D':
	{
		if(State==HIGH)//if it is set to be output set pin to 1
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	29 f4       	brne	.+10     	; 0x1c8 <DIO_write+0x78>
		{
			SET_PIN(pinNumber,PORTD);
 1be:	62 e3       	ldi	r22, 0x32	; 50
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 1c6:	08 95       	ret
		}
		else if(State==LOW)
 1c8:	41 11       	cpse	r20, r1
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <DIO_write+0x84>
		{
			CLEAR_PIN(pinNumber,PORTD);//if it is set to be output set pin to 0
 1cc:	62 e3       	ldi	r22, 0x32	; 50
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	0e 94 56 01 	call	0x2ac	; 0x2ac <CLEAR_PIN>
 1d4:	08 95       	ret

000001d6 <ENABLE_INTR>:

#include "intre.h"

void ENABLE_INTR(uint8_t PinNumber)
{
	SET_PIN(PinNumber,GICR);
 1d6:	6b e5       	ldi	r22, 0x5B	; 91
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
	sei();
 1de:	78 94       	sei
 1e0:	08 95       	ret

000001e2 <START_TIME>:
		}
		
	}
}
void STOP_TIMER()
{
 1e2:	88 30       	cpi	r24, 0x08	; 8
 1e4:	91 05       	cpc	r25, r1
 1e6:	d1 f0       	breq	.+52     	; 0x21c <START_TIME+0x3a>
 1e8:	28 f4       	brcc	.+10     	; 0x1f4 <START_TIME+0x12>
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	79 f0       	breq	.+30     	; 0x20c <START_TIME+0x2a>
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	79 f0       	breq	.+30     	; 0x210 <START_TIME+0x2e>
 1f2:	08 95       	ret
 1f4:	81 15       	cp	r24, r1
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	92 07       	cpc	r25, r18
 1fa:	09 f1       	breq	.+66     	; 0x23e <START_TIME+0x5c>
 1fc:	81 15       	cp	r24, r1
 1fe:	24 e0       	ldi	r18, 0x04	; 4
 200:	92 07       	cpc	r25, r18
 202:	19 f1       	breq	.+70     	; 0x24a <START_TIME+0x68>
 204:	80 34       	cpi	r24, 0x40	; 64
 206:	91 05       	cpc	r25, r1
 208:	51 f5       	brne	.+84     	; 0x25e <START_TIME+0x7c>
 20a:	0e c0       	rjmp	.+28     	; 0x228 <START_TIME+0x46>
 20c:	13 be       	out	0x33, r1	; 51
 20e:	08 95       	ret
 210:	63 e5       	ldi	r22, 0x53	; 83
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 21a:	08 95       	ret
 21c:	63 e5       	ldi	r22, 0x53	; 83
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 226:	08 95       	ret
 228:	63 e5       	ldi	r22, 0x53	; 83
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 232:	63 e5       	ldi	r22, 0x53	; 83
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 23c:	08 95       	ret
 23e:	63 e5       	ldi	r22, 0x53	; 83
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 248:	08 95       	ret
 24a:	63 e5       	ldi	r22, 0x53	; 83
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 254:	63 e5       	ldi	r22, 0x53	; 83
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
 25e:	08 95       	ret

00000260 <DELAY>:
	
}


void DELAY(uint32_t seconds)
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
	uint32_t no_overflow=0;
	//float MAX_overflow =0;
	//overflow(seconds,&MAX_overflow);
	START_TIME(1);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <START_TIME>
}


void DELAY(uint32_t seconds)
{
	uint32_t no_overflow=0;
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	d0 e0       	ldi	r29, 0x00	; 0
	//float MAX_overflow =0;
	//overflow(seconds,&MAX_overflow);
	START_TIME(1);
	while(no_overflow<2000) // macros to get tick and max delay
 270:	09 c0       	rjmp	.+18     	; 0x284 <DELAY+0x24>
	{
		
		while((*(TIFR) &(1<<0))==0);//wait for overflow flag
 272:	08 b6       	in	r0, 0x38	; 56
 274:	00 fe       	sbrs	r0, 0
 276:	fd cf       	rjmp	.-6      	; 0x272 <DELAY+0x12>
		SET_PIN(0,TIFR);  // clearing flag by software set pin to 1 datasheet
 278:	68 e5       	ldi	r22, 0x58	; 88
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 4a 01 	call	0x294	; 0x294 <SET_PIN>
		no_overflow++;//count up
 282:	21 96       	adiw	r28, 0x01	; 1
{
	uint32_t no_overflow=0;
	//float MAX_overflow =0;
	//overflow(seconds,&MAX_overflow);
	START_TIME(1);
	while(no_overflow<2000) // macros to get tick and max delay
 284:	c0 3d       	cpi	r28, 0xD0	; 208
 286:	87 e0       	ldi	r24, 0x07	; 7
 288:	d8 07       	cpc	r29, r24
 28a:	98 f3       	brcs	.-26     	; 0x272 <DELAY+0x12>
		
		while((*(TIFR) &(1<<0))==0);//wait for overflow flag
		SET_PIN(0,TIFR);  // clearing flag by software set pin to 1 datasheet
		no_overflow++;//count up
	}
	*TTCR0=0x00;
 28c:	13 be       	out	0x33, r1	; 51
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <SET_PIN>:
#include "bitmanipulation.h"


void SET_PIN(uint8_t pinNumber,volatile uint8_t* PortNumber)//set pin to 1
{
	*PortNumber |=(1<<pinNumber);
 294:	fb 01       	movw	r30, r22
 296:	90 81       	ld	r25, Z
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <SET_PIN+0xe>
 29e:	22 0f       	add	r18, r18
 2a0:	33 1f       	adc	r19, r19
 2a2:	8a 95       	dec	r24
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <SET_PIN+0xa>
 2a6:	29 2b       	or	r18, r25
 2a8:	20 83       	st	Z, r18
 2aa:	08 95       	ret

000002ac <CLEAR_PIN>:
	
}
void CLEAR_PIN(uint8_t pinNumber,volatile uint8_t* PortNumber)//set pin to 0{
	{
			*PortNumber &=~(1<<pinNumber);
 2ac:	fb 01       	movw	r30, r22
 2ae:	90 81       	ld	r25, Z
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <CLEAR_PIN+0xe>
 2b6:	22 0f       	add	r18, r18
 2b8:	33 1f       	adc	r19, r19
 2ba:	8a 95       	dec	r24
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <CLEAR_PIN+0xa>
 2be:	20 95       	com	r18
 2c0:	29 23       	and	r18, r25
 2c2:	20 83       	st	Z, r18
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
